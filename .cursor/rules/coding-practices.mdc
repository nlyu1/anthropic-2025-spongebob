---
description: 
globs: 
alwaysApply: true
---
# Coding pattern preferences
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase on that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- **Avoid having files over 200-300 lines of code**. Refactor into components or helper functions at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never overwrite my env file without first asking and confirming
- After major edits, update the relevant overview files in the @specification folder and update / create specification files as necessary. 

# Workflow preferences (IMPORTANT)

- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task, even if these code do not adhere to the best practices. For example, during styling, do not change code related to how the frontend queries data from the backend. 
- Write thorough tests for all major functionality (Backend integration tests passing; unit tests skipped)
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed
- Always think about what other methods and areas of code might be affected by code
- After major changes, update the relevant specification files (create new ones when introducing very major functionalities). 
- When debugging test errors, prior to making any fixes make sure to understand and reason out loud about [1] what does the test expect (read the test file), [2] what is implemented in the codebase, and [3] what do the specifications expect (read relevant overview or detailed specification files in `specifications/`). 
